import { Resource } from '../../../Resource';
import { Detector } from '../../../types';
import { ResourceDetectionConfigWithLogger } from '../../../config';
/**
 * The GcpDetector can be used to detect if a process is running in the Google
 * Cloud Platofrm and return a {@link Resource} populated with metadata about
 * the instance. Returns an empty Resource if detection fails.
 */
declare class GcpDetector implements Detector {
    /**
     * Attempts to connect and obtain instance configuration data from the GCP metadata service.
     * If the connection is succesful it returns a promise containing a {@link Resource}
     * populated with instance metadata as labels. Returns a promise containing an
     * empty {@link Resource} if the connection or parsing of the metadata fails.
     *
     * @param config The resource detection config with a required logger
     */
    detect(config: ResourceDetectionConfigWithLogger): Promise<Resource>;
    /** Add resource labels for K8s */
    private _addK8sLabels;
    /** Gets project id from GCP project metadata. */
    private _getProjectId;
    /** Gets instance id from GCP instance metadata. */
    private _getInstanceId;
    /** Gets zone from GCP instance metadata. */
    private _getZone;
    /** Gets cluster name from GCP instance metadata. */
    private _getClusterName;
}
export declare const gcpDetector: GcpDetector;
export {};
//# sourceMappingURL=GcpDetector.d.ts.map