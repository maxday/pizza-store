"use strict";
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ParentOrElseSampler = void 0;
const api_1 = require("@opentelemetry/api");
/**
 * A composite sampler that either respects the parent span's sampling decision
 * or delegates to `delegateSampler` for root spans.
 */
class ParentOrElseSampler {
    constructor(_delegateSampler) {
        this._delegateSampler = _delegateSampler;
    }
    shouldSample(parentContext, traceId, spanName, spanKind, attributes, links) {
        // Respect the parent sampling decision if there is one
        if (parentContext) {
            return {
                decision: (api_1.TraceFlags.SAMPLED & parentContext.traceFlags) === api_1.TraceFlags.SAMPLED
                    ? api_1.SamplingDecision.RECORD_AND_SAMPLED
                    : api_1.SamplingDecision.NOT_RECORD,
            };
        }
        return this._delegateSampler.shouldSample(parentContext, traceId, spanName, spanKind, attributes, links);
    }
    toString() {
        return `ParentOrElse{${this._delegateSampler.toString()}}`;
    }
}
exports.ParentOrElseSampler = ParentOrElseSampler;
//# sourceMappingURL=ParentOrElseSampler.js.map