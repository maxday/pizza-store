"use strict";
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.B3Propagator = exports.X_B3_SAMPLED = exports.X_B3_SPAN_ID = exports.X_B3_TRACE_ID = void 0;
const api_1 = require("@opentelemetry/api");
const context_1 = require("../context");
exports.X_B3_TRACE_ID = 'x-b3-traceid';
exports.X_B3_SPAN_ID = 'x-b3-spanid';
exports.X_B3_SAMPLED = 'x-b3-sampled';
const VALID_TRACEID_REGEX = /^([0-9a-f]{16}){1,2}$/i;
const VALID_SPANID_REGEX = /^[0-9a-f]{16}$/i;
const INVALID_ID_REGEX = /^0+$/i;
function isValidTraceId(traceId) {
    return VALID_TRACEID_REGEX.test(traceId) && !INVALID_ID_REGEX.test(traceId);
}
function isValidSpanId(spanId) {
    return VALID_SPANID_REGEX.test(spanId) && !INVALID_ID_REGEX.test(spanId);
}
/**
 * Propagator for the B3 HTTP header format.
 * Based on: https://github.com/openzipkin/b3-propagation
 */
class B3Propagator {
    inject(context, carrier, setter) {
        const spanContext = context_1.getParentSpanContext(context);
        if (!spanContext)
            return;
        if (isValidTraceId(spanContext.traceId) &&
            isValidSpanId(spanContext.spanId)) {
            setter(carrier, exports.X_B3_TRACE_ID, spanContext.traceId);
            setter(carrier, exports.X_B3_SPAN_ID, spanContext.spanId);
            // We set the header only if there is an existing sampling decision.
            // Otherwise we will omit it => Absent.
            if (spanContext.traceFlags !== undefined) {
                setter(carrier, exports.X_B3_SAMPLED, (api_1.TraceFlags.SAMPLED & spanContext.traceFlags) === api_1.TraceFlags.SAMPLED
                    ? '1'
                    : '0');
            }
        }
    }
    extract(context, carrier, getter) {
        const traceIdHeader = getter(carrier, exports.X_B3_TRACE_ID);
        const spanIdHeader = getter(carrier, exports.X_B3_SPAN_ID);
        const sampledHeader = getter(carrier, exports.X_B3_SAMPLED);
        const traceIdHeaderValue = Array.isArray(traceIdHeader)
            ? traceIdHeader[0]
            : traceIdHeader;
        const spanId = Array.isArray(spanIdHeader) ? spanIdHeader[0] : spanIdHeader;
        const options = Array.isArray(sampledHeader)
            ? sampledHeader[0]
            : sampledHeader;
        if (typeof traceIdHeaderValue !== 'string' || typeof spanId !== 'string') {
            return context;
        }
        const traceId = traceIdHeaderValue.padStart(32, '0');
        if (isValidTraceId(traceId) && isValidSpanId(spanId)) {
            return context_1.setExtractedSpanContext(context, {
                traceId,
                spanId,
                isRemote: true,
                traceFlags: isNaN(Number(options)) ? api_1.TraceFlags.NONE : Number(options),
            });
        }
        return context;
    }
}
exports.B3Propagator = B3Propagator;
//# sourceMappingURL=B3Propagator.js.map