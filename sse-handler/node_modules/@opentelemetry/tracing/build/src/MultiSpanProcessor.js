"use strict";
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.MultiSpanProcessor = void 0;
/**
 * Implementation of the {@link SpanProcessor} that simply forwards all
 * received events to a list of {@link SpanProcessor}s.
 */
class MultiSpanProcessor {
    constructor(_spanProcessors) {
        this._spanProcessors = _spanProcessors;
    }
    forceFlush(cb = () => { }) {
        let finished = 0;
        const total = this._spanProcessors.length;
        for (const spanProcessor of this._spanProcessors) {
            spanProcessor.forceFlush(() => {
                if (++finished === total) {
                    cb();
                }
            });
        }
    }
    onStart(span) {
        for (const spanProcessor of this._spanProcessors) {
            spanProcessor.onStart(span);
        }
    }
    onEnd(span) {
        for (const spanProcessor of this._spanProcessors) {
            spanProcessor.onEnd(span);
        }
    }
    shutdown(cb = () => { }) {
        let finished = 0;
        const total = this._spanProcessors.length;
        for (const spanProcessor of this._spanProcessors) {
            spanProcessor.shutdown(() => {
                if (++finished === total) {
                    cb();
                }
            });
        }
    }
}
exports.MultiSpanProcessor = MultiSpanProcessor;
//# sourceMappingURL=MultiSpanProcessor.js.map